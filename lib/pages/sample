import 'package:flutter/material.dart';
import 'package:flutter_application_1/components/addNewuser.dart';
import 'package:flutter_application_1/components/summaryWidget.dart';
import 'package:flutter_application_1/pages/dashboard.dart';
import 'package:flutter_application_1/pages/login.dart';
import 'package:flutter_application_1/pages/profile.dart';
import 'package:flutter_application_1/pages/summarryReports.dart';
import 'package:flutter_application_1/pages/violation_logs.dart';
import 'package:get_storage/get_storage.dart';
import 'package:global_configuration/global_configuration.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

Future<String> getName() async {
  final box = GetStorage();
  final url = Uri.parse(
    '${GlobalConfiguration().getValue("server_url")}/users/${box.read('user_id')}',
  );
  final response = await http.get(url);

  if (response.statusCode == 200) {
    final data = json.decode(response.body);
    return data['first_name'];
  } else {
    return "Unknown";
  }
}

class User {
  final String name;
  final String email;
  final String office;
  final String role;
  final String status;

  User({
    required this.name,
    required this.email,
    required this.office,
    required this.role,
    required this.status,
  });
}

class UserMgt extends StatefulWidget {
  const UserMgt({super.key});
  @override
  _UserManagementPageState createState() => _UserManagementPageState();
}

class _UserManagementPageState extends State<UserMgt> {
  double sideMenuSize = 0.0;
  List<User> users = [];

  @override
  void initState() {
    super.initState();
    fetchUser(); // âœ… Now works correctly
  }

  Future<void> fetchUser() async {
    try {
      final box = GetStorage();
      final userId = box.read('user_id');
      if (userId == null) {
        throw Exception("User ID not found in local storage.");
      }

      final serverUrl = GlobalConfiguration().getValue("server_url");
      if (serverUrl == null || serverUrl.isEmpty) {
        throw Exception("Server URL is not configured.");
      }

      final url = Uri.parse('$serverUrl/users/$userId');

      final headers = {'Content-Type': 'application/json'};

      final response = await http.get(url, headers: headers);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        setState(() {
          users = [
            User(
              name: data['first_name']?.toString() ?? '',
              email: data['email']?.toString() ?? '',
              office: data['office']?.toString() ?? '',
              role: data['role']?.toString() ?? '',
              status: data['status']?.toString() ?? '',
            ),
          ];
        });
      } else {
        debugPrint("Failed to fetch user: ${response.statusCode}");
        setState(() => users = []);
      }
    } catch (e) {
      debugPrint("Error fetching user: $e");
      setState(() => users = []);
    }
  }

  // --------------------------------------------------------
  // Below are your same methods: edit, delete, UI components
  // --------------------------------------------------------

  void _editUser(int index) {
    final user = users[index];
    final nameController = TextEditingController(text: user.name);
    final emailController = TextEditingController(text: user.email);
    final officeController = TextEditingController(text: user.office);
    String roleValue = user.role;

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Row(
          children: [
            Icon(Icons.edit, color: Colors.blue, size: 30),
            SizedBox(width: 8),
            Text(
              "Edit User",
              style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        content: SingleChildScrollView(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(
                child: Column(
                  children: [
                    _buildTextField("Name", nameController),
                    _buildTextField("Email", emailController),
                  ],
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  children: [
                    _buildTextField("Office", officeController),
                    const SizedBox(height: 12),
                    DropdownButtonFormField<String>(
                      value: roleValue,
                      decoration: _inputDecoration("Role"),
                      items: ["SASO Officer", "School Guard"]
                          .map(
                            (r) => DropdownMenuItem(value: r, child: Text(r)),
                          )
                          .toList(),
                      onChanged: (value) {
                        if (value != null) roleValue = value;
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actionsPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              "Cancel",
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ),
          ElevatedButton.icon(
            style: ElevatedButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: Colors.blue[900],
            ),
            onPressed: () {
              setState(() {
                users[index] = User(
                  name: nameController.text,
                  email: emailController.text,
                  office: officeController.text,
                  role: roleValue,
                  status: user.status,
                );
              });
              Navigator.pop(context);
            },
            icon: const Icon(Icons.save),
            label: const Text("Save"),
          ),
        ],
      ),
    );
  }

  void _deleteUser(int index) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text("Delete User"),
        content: Text("Are you sure you want to delete ${users[index].name}?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("Cancel"),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                users.removeAt(index);
              });
              Navigator.pop(context);
            },
            child: const Text("Delete"),
          ),
        ],
      ),
    );
  }

  InputDecoration _inputDecoration(String label) {
    return InputDecoration(
      labelText: label,
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
      filled: true,
      fillColor: Colors.grey[100],
    );
  }

  Widget _buildTextField(String label, TextEditingController controller) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: TextField(
        controller: controller,
        decoration: _inputDecoration(label),
      ),
    );
  }

  // --------------------------------------------------------
  // BUILD UI
  // --------------------------------------------------------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'User Management',
          style: TextStyle(color: Colors.white, fontSize: 30),
        ),
        backgroundColor: Colors.blue[900],
        actions: [
          FutureBuilder<String>(
            future: getName(),
            builder: (context, snapshot) {
              return Padding(
                padding: const EdgeInsets.only(right: 20),
                child: Text(
                  snapshot.hasData ? snapshot.data! : "Loading...",
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: users.isEmpty
            ? const Center(child: CircularProgressIndicator())
            : SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: DataTable(
                  columns: const [
                    DataColumn(label: Text('Name')),
                    DataColumn(label: Text('Email')),
                    DataColumn(label: Text('Office')),
                    DataColumn(label: Text('Role')),
                    DataColumn(label: Text('Status')),
                    DataColumn(label: Text('Actions')),
                  ],
                  rows: users.asMap().entries.map((entry) {
                    final index = entry.key;
                    final user = entry.value;
                    return DataRow(
                      cells: [
                        DataCell(Text(user.name)),
                        DataCell(Text(user.email)),
                        DataCell(Text(user.office)),
                        DataCell(Text(user.role)),
                        DataCell(
                          Chip(
                            label: Text(user.status),
                            backgroundColor: user.status == "Active"
                                ? Colors.green
                                : Colors.red,
                          ),
                        ),
                        DataCell(
                          Row(
                            children: [
                              IconButton(
                                icon: const Icon(
                                  Icons.edit,
                                  color: Colors.blue,
                                ),
                                onPressed: () => _editUser(index),
                              ),
                              IconButton(
                                icon: const Icon(
                                  Icons.delete,
                                  color: Colors.red,
                                ),
                                onPressed: () => _deleteUser(index),
                              ),
                            ],
                          ),
                        ),
                      ],
                    );
                  }).toList(),
                ),
              ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) => const AddNewUserDialog(),
          );
        },
        label: const Text("Add User"),
        icon: const Icon(Icons.add),
        backgroundColor: Colors.blue[900],
      ),
    );
  }
}
